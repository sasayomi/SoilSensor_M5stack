/*
SLT5006(UART) -->M5stack
Red&white -->5V
Black--> GND
Blue -->16
Yellow-->17

WiFi時刻取得表示機能追加
SDカード保存機能（時刻・見出しが未完）
WiFi経由でブラウザからリアルタイムデータ読み込み（CSVデータ未完）

計画

・計測スパン変更
・簡易ルータ化（UECS送信）
*/
//定義
//基本部
#include <M5Stack.h>
//時刻表示・WiFi部
#include <ArduinoJson.h>                                    // JSONライブラリ
#include <WiFi.h>                                           // Wifi制御用ライブラリ
#include <time.h>                                           // 時刻制御用ライブラリ
//サーバ部
#include <WebServer.h>
#include <ESPmDNS.h>
//シリアル通信部
#include <SoftwareSerial.h> //EspSoftwareSerial必要

//グローバル変数
//基本部
//時刻表示・WiFi部
String JsonData;                                            // JSON形式データの格納用
int sdstat = 0;                                             // microSDカードからのデータ読み出し状況（False:0,True:1）
char buf[60];
StaticJsonDocument<192> n_jsondata;                         // JSON形式データ格納用メモリの確保
String i_ssid, i_pass;                                      // SSIDとパスワードの格納用
  // NTP接続情報　NTP connection information.
const char* NTPSRV      = "ntp.jst.mfeed.ad.jp";            // NTPサーバーアドレス NTP server address.
const long  GMT_OFFSET  = 9 * 3600;                         // GMT-TOKYO(時差９時間）9 hours time difference.
const int   DAYLIGHT_OFFSET = 0;                            // サマータイム設定なし No daylight saving time setting
struct tm timeInfo;                                         // tmオブジェクトをtimeinfoとして生成
int smin;
//CSVファイル保存部
const char* fname = "/btnevent_log.csv";
File file;
//サーバ部
WebServer server(80); // WebServerオブジェクト作成
//シリアル通信部
SoftwareSerial GroveA(21, 22);
int flag;
int size;
float temp=0;
float bulk=0;
float VWC=0;
float VWCR=0;
float VWCC=0;
float pore=0;
int interval=3000;//測定間隔(msec)

//コード
//時刻表示・WiFi部-------------------------
void get_wifi_info() {
  if (!SD.begin()) {                                        // SDカードの初期化
    Serial.println("Card failed, or not present");          // シリアルコンソールへの出力
    while (1);
  }
  Serial.println("microSD card initialized.");              // シリアルコンソールへの出力

  if ( SD.exists("/SSID.txt")) {                            // ファイルの存在確認（SSID.ini）
    Serial.println("SSID.txt exists.");                     // ファイルがある場合の処理
    delay(500);
    File myFile = SD.open("/SSID.txt", FILE_READ);          // 読み取り専用でファイルを開く

    if (myFile) {                                           // ファイルが正常に開けた場合
      Serial.println("/SSID.txt Content:");
      M5.Lcd.setCursor(0, 0);
      M5.Lcd.setTextSize(2);
      M5.Lcd.setTextColor(WHITE,BLACK);
      M5.Lcd.print("Open ");
      while (myFile.available()) {                          // ファイル内容を順に変数に格納
        JsonData.concat(myFile.readString());
      }
      myFile.close();                                       // ファイルのクローズ
      sdstat = 1;
    } else {
      Serial.println("error opening /SSID.txt");
      sdstat = 0;
    }
  } else {
    Serial.println("SSID.txt doesn't exit.");               // シリアルコンソールへの出力
    sdstat = 0;
  } 
}
void read_json_wifi_info(){
  DeserializationError error = deserializeJson(n_jsondata, JsonData); // JSON形式データの読み込み
  
  if (error) {                                            // JSON形式データ読み込みエラーの場合
    Serial.print(F("deserializeJson() failed: "));
    Serial.println(error.f_str());                        // エラーメッセージのディスプレイ表示
  } else {                                                // 正常な場合
    i_ssid = n_jsondata["ssid"].as<String>();             // "ssid"の値を取得             
    i_pass = n_jsondata["pass"].as<String>();             // "pass"の値を取得

    Serial.println("Can read from JSON Data!");           // シリアルコンソールへの出力
    Serial.print("ID: ");
    Serial.println(i_ssid);                               // "ssid"の値をディスプレイ表示
    Serial.print("PW: ");
    Serial.println(i_pass);                               // "pass"の値をディスプレイ表示
    //  M5.Lcd.setCursor(0, 150);
      M5.Lcd.print("SSID ");
  }
}
void connect_wifi(){
  Serial.print("Conecting Wi-Fi ");                       // シリアルコンソールへの出力

  char buf_ssid[33], buf_pass[65];                        // SSID,パスワードをChar型へ変更
  i_ssid.toCharArray(buf_ssid, 33);
  i_pass.toCharArray(buf_pass, 65);

  Serial.println(WiFi.status()); 
  if(WiFi.status() == 1 ||WiFi.status() == 255){
     WiFi.begin(buf_ssid, buf_pass);                         // Wi-Fi接続開始
   }else{

  }
  if(WiFi.status() == 3){
  Serial.println("WiFi connected"); 
  Serial.print("IP address: "); 
  Serial.println(WiFi.localIP());  
  //  M5.Lcd.fillRect(150, 120, 100, 30 , BLACK); 
  //  M5.Lcd.setTextColor(WHITE); 
  M5.Lcd.print("WiFiON ");  
  M5.Lcd.print(i_ssid);  
  }else{
  Serial.print("NoWiFi ");                                     // Wi-Fi接続結果をディスププレイへ出力
  M5.Lcd.print("NOWiFi ");    
  }
  Serial.println(WiFi.status()); 

}
void time_sync(const char* ntpsrv, long gmt_offset, int daylight_offset) {

  configTime(gmt_offset, daylight_offset, ntpsrv);          // NTPサーバと同期

  if (getLocalTime(&timeInfo)) {                            // timeinfoに現在時刻を格納
    Serial.print("NTP : ");                                 // シリアルモニターに表示
    Serial.println(ntpsrv);                                 // シリアルモニターに表示

    sprintf(buf, "%04d-%02d-%02d %02d:%02d:%02d\n",     // 表示内容の編集
    timeInfo.tm_year + 1900, timeInfo.tm_mon + 1, timeInfo.tm_mday,
    timeInfo.tm_hour, timeInfo.tm_min, timeInfo.tm_sec);
    M5.Lcd.setCursor(0, 21);
    M5.Lcd.setTextColor(WHITE,BLACK);
    M5.Lcd.setTextSize(2);
    M5.Lcd.printf(buf, "%04d-%02d-%02d %02d:%02d:%02d\n",timeInfo.tm_year + 1900, timeInfo.tm_mon + 1, timeInfo.tm_mday,timeInfo.tm_hour, timeInfo.tm_min, timeInfo.tm_sec);
 
    Serial.println(buf);                                    // シリアルモニターに表示
  }
  else {
    Serial.print("NTP Sync Error ");                        // シリアルモニターに表示
    M5.Lcd.setCursor(0, 21);
    M5.Lcd.setTextColor(WHITE,BLACK);
    M5.Lcd.setTextSize(2);
    M5.Lcd.print("TIME NOT AVAILABLE");
  }
}

//サーバ部--------------------------------
void handleTemp(){
  char jump;
  float temp4;
  jump= 2;

  char moji[1024];
  float time=1;
	float  data1 = time;
  float  data2 = temp;
	float  data3 = bulk;
  float  data4 = VWC;
  float  data5 = pore;
  float  data6 = VWCR;
  float  data7 = VWCC;
  float  data8 = interval; 
	//	moji配列に指定フォーマットで文字列を生成
	//sprintf(moji, "% %c %.2f", data1, data2, data3);
  sprintf(moji, 
    "<html>\
     <head>\
        <title>Murata SoilSensor Measurement</title>\
     </head>\
     <body>\
        <h1 style=\"font-size= 50px\">M5Stack Temperature Measurement</h1>\
        <p style=\"font-size= 50px\">Temp: %.2f 'C</p>\
        <p>Temp: %.2f 'C</p>\
        <p>ECBulk: %.2f dS/m</p>\
        <p>VWC: %.2f %%</p>\
        <p>ECPORE: %.2f dS/m</p>\
        <p>VWC ROCK: %.2f %%</p>\
        <p>VWC COCO: %.2f %%</p>\
     </body>\
     </html>",
  data1, data2,data3,data4,data5,data6,data7);

  server.send(200, "text/html", moji);
  M5.Lcd.println("accessed on \"/\"");
}

void handleNotFound(){
  server.send(404, "text/plain", "File Not Found\n\n");
  M5.Lcd.println("File Not Found");
}

//シリアル通信部-----------------------------------------------------------

void writecom(int size, int value[]){//センサ送信
  for (int i=0;i<size;i++){
    GroveA.write(value[i]);
  }
  while (GroveA.available()>0){
    char t = GroveA.read();
  }
  Serial.print("From M5stack:");Serial.print(" ");
  for (int i=0;i<size;i++){
    Serial.print(value[i],HEX);Serial.print(" "); 
  }
  Serial.print(flag);  Serial.println("send");
}

void receive(int valn){//センサ受信
  int val[valn]={0};
  if(GroveA.available()>0){
    for (int i=0; i<valn;i++){
      val[i]=GroveA.read();
    }
  }
  while (GroveA.available()>0){
    char t = GroveA.read();
  }
  Serial.print(flag);Serial.print("fromsensor");
  for (int i=0;i<valn;i++){
    Serial.print(val[i],HEX);;Serial.print(" "); 
  }
  Serial.print(flag);Serial.println("receive");
  if((val[1]==8)&&(val[3]==1)){
    flag=1;
    Serial.println("read/measured");
    for (int i=0; i<valn;i++){
      Serial.print(val[i],HEX);Serial.print(" ");
    }
  }else{
    Serial.println("readonly");
  }
}

void receive2(int valn){
  valn=21;
  int val[valn]={0};
  if(GroveA.available()>0){
    for (int i=0; i<valn;i++){
      val[i]=GroveA.read();
    }
  }
  while (GroveA.available()>0){
    char t = GroveA.read();
  }
  Serial.print(flag);Serial.print("fromsensor");
  for (int i=0;i<valn;i++){
    Serial.print(val[i],HEX);;Serial.print(" "); 
  }
  Serial.print(flag);Serial.println("receive");

  if((val[1]==8)&&(val[3]==1)){
    flag=1;
    Serial.println("read/measured");
    for (int i=0; i<valn;i++){
      Serial.print(val[i],HEX);Serial.print(" ");
    }
  }else{
      Serial.println("readonly");
  }

  temp=(val[3]+val[4]*256)*0.0625;
  bulk=(val[5]+val[6]*256)*0.001;
  VWC=(val[9]+val[10]*256)*0.1;
  VWCR=(val[7]+val[8]*256)*0.1;
  VWCC=(val[11]+val[12]*256)*0.1;
  pore=(val[15]+val[16]*256)*0.001;
  display(flag,temp,bulk,VWC,pore,VWCR,VWCC);
}

//LCD表示部
void display(int flag2,float temp2,float bulk2,float VWC2,float pore2,float VWCR2,float VWCC2){
  get_wifi_info();                                          // microSDカードからWi-Fi情報の取得
  if (sdstat == 1) {
    read_json_wifi_info();                                  // JSON形式データの読み出し
    connect_wifi();                                         // Wi-Fiアクセスポイントへの接続
  }
  time_sync(NTPSRV, GMT_OFFSET, DAYLIGHT_OFFSET);           // 時刻同期関数  

  if(flag2==1) {
    Serial.print(flag);Serial.println("display");
    Serial.print(",");Serial.print(temp2);
    Serial.print(",");Serial.print(bulk2);
    Serial.print(",");Serial.print(VWC2);
    Serial.print(",");Serial.print(pore2);Serial.println(",");

    M5.Lcd.fillRect(0, 63, 320, 120 , BLACK); 
    M5.Lcd.setCursor(0, 63);
    M5.Lcd.setTextColor(YELLOW); 
    M5.Lcd.setTextSize(3);    // 文字サイズ（整数倍率）
    M5.Lcd.print("Temp    ");M5.Lcd.print(temp2);M5.Lcd.println(" deg");
    M5.Lcd.print("ECbulk  ");M5.Lcd.print(bulk2);M5.Lcd.println(" dS/m");
    M5.Lcd.print("VWC     ");M5.Lcd.print(VWC2);M5.Lcd.println(" %");
    M5.Lcd.print("ECpore  ");M5.Lcd.print(pore2);M5.Lcd.println(" dS/m");
    M5.Lcd.print("VWC ROCK");M5.Lcd.print(VWCR);M5.Lcd.println(" %");
    M5.Lcd.print("VWC COCO");M5.Lcd.print(VWCC);M5.Lcd.println(" %");
    M5.Lcd.setTextSize(2);    // 文字サイズ（整数倍率）
    //SD
    file = SD.open(fname, FILE_APPEND);
    file.print(temp2);
      file.print(",");
      file.print(bulk2);
      file.print(",");    
      file.print(VWC2);
      file.print(",");
      file.print(pore2);
      file.print("\n");
    file.close();
  }
  M5.Lcd.setCursor(0, 220);
  M5.Lcd.print("Interval:");M5.Lcd.print(interval);M5.Lcd.print("msec");
}

//基本部
//サブループ
void program(){

  //測定開始
  Serial.print("Start sensor");
  int  value[]={0X02,0X07,0X01,0X01,0X0D,0X70};
  writecom(6,value);
  delay(100);
  receive(6);//受信バイト数6
   //測定完了ステータス読み出し
  flag=0;
  while(flag==0){
    Serial.print("Read status");
    int value1[]={0X01,0X08,0X01,0X00,0XE6,0X00};
    writecom(5,value1);
    delay(100);
    receive(6);//受信バイト数6
    delay(2000);//測定完了ステータス確認サイクル
   }
  //測定データ読み出し
  int value2[]={0X01,0X13,0X10,0XFC,0X2C,0X00};
  writecom(5,value2);
  delay(100);
  receive2(21);//受信バイト数21
}

void setup() {
  M5.begin();                 // 本体初期化(LCD, SD, Serial, I2C)
  M5.Power.begin();           // 電源初期化
  Serial.begin(9600);         // 標準のシリアル通信初期化（初期値はG3（RX）,G1（TX））
  GroveA.begin(9600);        // シリアル通信2初期化 (初期値は G16（RX）, G17（TX）)

  //LCD表示部
  M5.Lcd.setTextColor(YELLOW); 
  M5.Lcd.fillScreen(BLACK); // 背景色
  M5.Lcd.setTextSize(3);    // 文字サイズ（整数倍率）
  M5.Lcd.setTextDatum(4);                                 // 中央基準
  M5.Lcd.drawString("Soil Sensor",M5.Lcd.width()/2, 120);   // 中央揃え(文字列, x座標, y座標, フォント)
  M5.Lcd.setTextDatum(0);  

  //時刻/WiFi部
  get_wifi_info();                                          // microSDカードからWi-Fi情報の取得
  if (sdstat == 1) {
    read_json_wifi_info();                                  // JSON形式データの読み出し
    connect_wifi();                                         // Wi-Fiアクセスポイントへの接続
  }
  time_sync(NTPSRV, GMT_OFFSET, DAYLIGHT_OFFSET);           // 時刻同期関数  

   //サーバ部
   if(MDNS.begin("m5stack")){
     Serial.println("MDNS responder started");
   }
   server.on("/", handleTemp); // URLにアクセスされた際の動作を登録
   server.onNotFound(handleNotFound); // server.onで登録されていないURLにアクセスされた際の動作を登録
   server.begin(); // クライアントからの接続応答待ちを開始
   Serial.println("HTTP server started");

}

void loop() {
  server.handleClient();
  program();
  delay(interval);//測定間隔(ms)
}
